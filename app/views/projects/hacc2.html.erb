<% provide(:title, 'Human-Aided Computer Composition') %>

	<h1>Human-Aided Computer Composition</h1>
	<div class="row-fluid">
    	<div class="col-md-8 col-md-offset-2">
    		<!-- TODO: violin duets -->
    		<!-- TODO: string quartets and genetic algorithms -->
    		<!-- TODO: fiddle tunes -->
		  	<input type="image" src="midijs/pause.png" align="absmiddle" value="pause" onclick="pausePlayStop(true)" id="pausePlayStop">
			<input type="image" src="midijs/stop.png" align="absmiddle" value="stop" onclick="pausePlayStop(true)">
    		Interactive application coming soon.<br>
    		In the mean time, check out the project's <a href="http://github.com/jthurst3/computermusic">GitHub</a> site.
    	</div>
    </div>


<script type="text/javascript">

window.onload = function () {
	// alert(MIDI);
	notes_times = [[-2, [0, 0.25]], [-5, [0.25, 0.5]], [-2, [0.5, 0.75]], [3, [0.75, 
1]], [-2, [1, 1.25]], [0, [1.25, 1.5]], [2, [1.5, 1.75]], [3, [1.75, 
2]], [0, [2, 2.5]], [3, [2.5, 2.75]], [0, [2.75, 3]], [0, [3, 3.5]], 
[2, [3.5, 3.75]], [0, [3.75, 4]], [0, [4, 4.25]], [3, [4.25, 4.5]], 
[0, [4.5, 4.75]], [3, [4.75, 5]], [0, [5, 5.25]], [-2, [5.25, 5.5]], 
[0, [5.5, 5.75]], [2, [5.75, 6]], [-2, [6, 6.5]], [2, [6.5, 6.75]], 
[5, [6.75, 7]], [-2, [7, 7.5]], [0, [7.5, 7.75]], [-2, [7.75, 8]], 
[-2, [8, 8.25]], [3, [8.25, 8.5]], [7, [8.5, 8.75]], [10, [8.75, 9]], 
[-2, [9, 9.25]], [-4, [9.25, 9.5]], [-5, [9.5, 9.75]], [-4, [9.75, 
10]], [-4, [10, 10.5]], [0, [10.5, 10.75]], [3, [10.75, 11]], [-4, 
[11, 11.5]], [-2, [11.5, 11.75]], [-4, [11.75, 12]], [2, [12, 
12.25]], [5, [12.25, 12.5]], [2, [12.5, 13]], [2, [13, 13.25]], [0, 
[13.25, 13.5]], [2, [13.5, 14]], [-2, [14, 14.5]], [-5, [14.5, 15]], 
[-2, [15, 16]], [-2, [16, 16.25]], [-5, [16.25, 16.5]], [-2, [16.5, 
16.75]], [3, [16.75, 17]], [-2, [17, 17.25]], [0, [17.25, 17.5]], [2, 
[17.5, 17.75]], [3, [17.75, 18]], [0, [18, 18.5]], [3, [18.5, 
18.75]], [0, [18.75, 19]], [0, [19, 19.5]], [2, [19.5, 19.75]], [0, 
[19.75, 20]], [0, [20, 20.25]], [3, [20.25, 20.5]], [0, [20.5, 
20.75]], [3, [20.75, 21]], [0, [21, 21.25]], [-2, [21.25, 21.5]], [0, 
[21.5, 21.75]], [2, [21.75, 22]], [-2, [22, 22.5]], [2, [22.5, 
22.75]], [5, [22.75, 23]], [-2, [23, 23.5]], [0, [23.5, 23.75]], [-2, 
[23.75, 24]], [-2, [24, 24.25]], [3, [24.25, 24.5]], [7, [24.5, 
24.75]], [10, [24.75, 25]], [-2, [25, 25.25]], [-4, [25.25, 25.5]], 
[-5, [25.5, 25.75]], [-4, [25.75, 26]], [-4, [26, 26.5]], [0, [26.5, 
26.75]], [3, [26.75, 27]], [-4, [27, 27.5]], [-2, [27.5, 27.75]], 
[-4, [27.75, 28]], [2, [28, 28.25]], [5, [28.25, 28.5]], [2, [28.5, 
29]], [2, [29, 29.25]], [0, [29.25, 29.5]], [2, [29.5, 30]], [-2, 
[30, 30.5]], [-5, [30.5, 31]], [-2, [31, 32]], [15, [32, 32.25]], 
[10, [32.25, 32.5]], [7, [32.5, 32.75]], [10, [32.75, 33]], [15, [33, 
33.25]], [17, [33.25, 33.5]], [19, [33.5, 33.75]], [20, [33.75, 34]], 
[15, [34, 34.5]], [19, [34.5, 34.75]], [24, [34.75, 35]], [15, [35, 
35.5]], [14, [35.5, 35.75]], [12, [35.75, 36]], [12, [36, 36.25]], 
[8, [36.25, 36.5]], [3, [36.5, 36.75]], [0, [36.75, 37]], [12, [37, 
37.25]], [10, [37.25, 37.5]], [12, [37.5, 37.75]], [10, [37.75, 38]], 
[10, [38, 38.5]], [5, [38.5, 38.75]], [10, [38.75, 39]], [10, [39, 
39.5]], [8, [39.5, 39.75]], [7, [39.75, 40]], [7, [40, 40.25]], [10, 
[40.25, 40.5]], [7, [40.5, 40.75]], [10, [40.75, 41]], [7, [41, 
41.25]], [5, [41.25, 41.5]], [3, [41.5, 41.75]], [5, [41.75, 42]], 
[8, [42, 42.5]], [3, [42.5, 42.75]], [8, [42.75, 43]], [8, [43, 
43.5]], [10, [43.5, 43.75]], [12, [43.75, 44]], [5, [44, 44.5]], [2, 
[44.5, 44.75]], [-4, [44.75, 45]], [5, [45, 45.5]], [7, [45.5, 
45.75]], [5, [45.75, 46]], [3, [46, 46.25]], [7, [46.25, 46.5]], [3, 
[46.5, 46.75]], [7, [46.75, 47]], [3, [47, 48]], [15, [48, 48.25]], 
[10, [48.25, 48.5]], [7, [48.5, 48.75]], [10, [48.75, 49]], [15, [49, 
49.25]], [17, [49.25, 49.5]], [19, [49.5, 49.75]], [20, [49.75, 50]], 
[15, [50, 50.5]], [19, [50.5, 50.75]], [24, [50.75, 51]], [15, [51, 
51.5]], [14, [51.5, 51.75]], [12, [51.75, 52]], [12, [52, 52.25]], 
[8, [52.25, 52.5]], [3, [52.5, 52.75]], [0, [52.75, 53]], [12, [53, 
53.25]], [10, [53.25, 53.5]], [12, [53.5, 53.75]], [10, [53.75, 54]], 
[10, [54, 54.5]], [5, [54.5, 54.75]], [10, [54.75, 55]], [10, [55, 
55.5]], [8, [55.5, 55.75]], [7, [55.75, 56]], [7, [56, 56.25]], [10, 
[56.25, 56.5]], [7, [56.5, 56.75]], [10, [56.75, 57]], [7, [57, 
57.25]], [5, [57.25, 57.5]], [3, [57.5, 57.75]], [5, [57.75, 58]], 
[8, [58, 58.5]], [3, [58.5, 58.75]], [8, [58.75, 59]], [8, [59, 
59.5]], [10, [59.5, 59.75]], [12, [59.75, 60]], [5, [60, 60.5]], [2, 
[60.5, 60.75]], [-4, [60.75, 61]], [5, [61, 61.5]], [7, [61.5, 
61.75]], [5, [61.75, 62]], [3, [62, 62.25]], [7, [62.25, 62.5]], [3, 
[62.5, 62.75]], [7, [62.75, 63]], [3, [63, 64]]];
	MIDI.loadPlugin({
		soundfontUrl: "./soundfont/",
		instrument: "acoustic_grand_piano",
		callback: function() {
			MIDI.start(notes_times);
		}
	});
};

var playPiece = function(notes_times) {
	
	// notes_times has notes first (with middle C = 0), then list of start times and end times for each note, starting at time 0
	// for each pair of notes and times, send note on and note off events
	for(var i = 0; i < notes_times.length; i++) {
		MIDI.eventQueue.push({
					event: event,
					source: MIDI.noteOn(0, notes_times[i][0]+60, 127, .8*notes_times[i][1][0]),
					interval: scheduleTracking(0, notes_times[i][0]+60, .8*notes_times[i][1][0], .8*(notes_times[i][1][1] - notes_times[i][1][0]), 144, 127)
				});
	}
};

// TODO: convert notes/rhythms to MIDI format

// Toggle between Pause and Play modes.
var pausePlayStop = function(stop, notes_data) {
	var d = document.getElementById("pausePlayStop");
	alert(MIDI.Player.playing);
	if (stop) {
		MIDI.Player.stop();
		d.src = "midijs/play.png";
	} else if (MIDI.Player.playing) {
		d.src = "midijs/play.png";
		MIDI.Player.pause(true);
	} else {
		d.src = "midijs/pause.png";
		MIDI.Player.resume(notes_data);
	}
};

</script>
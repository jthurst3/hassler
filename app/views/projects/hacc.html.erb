<% provide(:title, 'Human-Aided Computer Composition') %>
<% content_for :head do %>
	<%= stylesheet_link_tag "hacc", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "midijs/js/MIDI/AudioDetect.js", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "midijs/js/MIDI/LoadPlugin.js", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "midijs/js/MIDI/Plugin.js", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "midijs/js/MIDI/Player.js", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "midijs/js/Window/DOMLoader.script.js", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "midijs/inc/Base64.js", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "midijs/inc/base64binary.js", "data-turbolinks-track" => true %>
    <!-- javascript_include_tag "midijs/MIDI.min.js", "data-turbolinks-track" => true -->
    <%= javascript_include_tag "computermusic/js/fiddletune.js", "data-turbolinks-track" => true %>
<% end %>

	<h1>HACC</h1>
    <h2>Human-Aided Computer Composition</h2>
	<div class="row-fluid">
		<section id="music">
            <div class="col-md-6 col-md-offset-3 center">
    			<button class="btn btn-primary" onclick="random_fiddle_tune()">Generate Fiddle Tune</button>
            </div>
		</section>
            <div class="col-md-6 col-md-offset-3">
                <hr>
        		<p style="text-align: center">To access the source code, check out the project's <a href="http://github.com/jthurst3/computermusic">GitHub</a> site.</p>
            </div>
    </div>

    <script type="text/javascript">
    var startTime;
    // template is modified from the MIDI.js library (https://github.com/mudcube/MIDI.js)
    window.onload = function () {
        MIDI.loadPlugin({
            soundfontUrl: "/assets/midijs/soundfont/",
            instrument: "acoustic_grand_piano",
            callback: function() {
                var delay = 0; // play one note every quarter second
                var note = 50; // the MIDI note
                var velocity = 127; // how hard the note hits
                // set the volume
                MIDI.setVolume(0, 127);
            }
        });
        // start counting how much time elapsed since page load, since 
        // we need to offset MIDI playback start and end times by the time since page load
        // http://www.webdeveloper.com/forum/showthread.php?3153-How-much-time-has-elapsed-Since-loading-this-web-page
        startTime = new Date().getTime();
    };

    // function for generating a random fiddle tune in a random key
    var random_fiddle_tune = function() {
        // pick a key randomly
        var key = Math.floor(Math.random()*12);
        // generate the tune
        var tune = fiddletune(key);
        // play the tune at 75 beats per minute
        translateFiddleTune(tune, 75);
    };

    // code for translating a sequence of notes for the fiddle tune into stuff that is played back
    var translateFiddleTune = function(tune, tempo) {
        // we need to know how much time has elapsed since page load
        var offset = Math.floor((new Date().getTime() - startTime)/1000) + 1;
        for (var note = 0; note < tune[0].length; note++) {
            // console.log("start and end times for " + tune[0][note] + ": " + (0.75*note) + " and " + (0.75*(note+1)));
            MIDI.noteOn(0, tune[0][note] + 60, 127, (60/tempo)*tune[1][note][0] + offset);
            MIDI.noteOff(0, tune[0][note] + 60, (60/tempo)*tune[1][note][1] + offset);
        };
    }

    var possibleRhythms = [[[0, 1]], [[0, 0.5], [0.5, 0.75], [0.75, 1]], [[0, 
     0.25], [0.25, 0.5], [0.5, 0.625], [0.625, 0.75], [0.75, 1]], [[0,
      0.25], [0.25, 0.5], [0.5, 0.75], [0.75, 1]], [[0, 0.5], [0.5, 
     1]], [[0, 0.25], [0.25, 0.5], [0.5, 1]]];
    </script>
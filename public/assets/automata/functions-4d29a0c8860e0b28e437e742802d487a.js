var row,rows,columns,rules,score,rows_left,reveal,current_row,turn,human_player,computer_player,clickable_rules,clickable_squares,square_queue,invalid_squares,invalid_rule,game_over,human_color,initialize_vars=function(e,r,u){turn=0,human_player=u,computer_player=opposite(u),row=0,rows=e,columns=r,current_row=initialize_row(r),score=[0,0],compute_score(current_row),rules=initialize_rules(),rows_left=e-1,reveal=[2,2],0==human_player?(clickable_squares=!0,clickable_rules=!0,human_color="white"):(clickable_squares=!1,clickable_rules=!1,human_color="black"),square_queue=[],invalid_squares=[],invalid_rule=-1,game_over=!1},compute_score=function(e){score=[0,0];for(var r=0;r<e.length;r++)score[e[r]]++},initialize_row=function(e){for(var r=[],u=0;e>u;u++)r.push(u);for(var u=0;e/2>u;u++){var n=Math.floor(Math.random()*(e-u));r.splice(n,1)}for(var o=[],u=0;e>u;u++)o[u]=-1!=r.indexOf(u)?0:1;return o},initialize_rules=function(){var e=initialize_row(4);return e},calculate_next_row=function(){for(var e=[],r=0;columns>r;r++){var u=[current_row[r],current_row[(r+1)%columns]];e.push(compute_rule(u))}current_row=e,row++,rows_left--,check_game_over(),compute_score(current_row)},compute_rule=function(e){var r=2*e[0]+e[1];return rules[r]},change_rule=function(e){rules[e]=opposite(rules[e]),invalid_rule=e},opposite=function(e){return 1-e},change_squares=function(e){for(var r=0;r<Math.min(e.length,5);r++)current_row[e[r]]=opposite(current_row[e[r]]);compute_score(current_row)},compute_turn=function(e,r){return game_over?(console.log("The game is over."),!1):"reveal"==e?(turn_reveal(),!0):0==reveal[turn]?(console.log("You must reveal the next row this turn."),!1):"squares"==e?0==r.length||r.length>5?(console.log("Must change between 1 and 5 squares."),!1):validNumbers(r)?(turn_squares(r),!0):(console.log("Some square numbers were invalid."),!1):"rule"==e?0>r||r>3?(console.log("Rule number must be between 0 and 3"),!1):(turn_rule(r),!0):(console.log("Invalid turn type."),!1)},turn_preprocess=function(e){return"squares"!=e&&update_squares(),!0},turn_postprocess=function(e,r){if("reveal"===e)show_next_row(),reveal[turn]=2,invalid_squares=[],invalid_rule=-1;else if("rule"===e)reveal[turn]--,invalid_squares=[],invalid_rule=r;else{if("squares"!==e)return console.log(e," is not a valid type of move."),!1;reveal[turn]--,invalid_squares=r,invalid_rule=-1}return turn=opposite(turn),compute_clickable(),square_queue=[],update_squares(),update_rules(),update_score_header(),update_turn_header(),make_squares_clickable(),make_rules_clickable(),0==rows_left&&game_postprocess(),!0},game_postprocess=function(){score[0]>score[1]?0==human_player?winning_message():losing_message():score[1]>score[0]?1==human_player?winning_message():losing_message():tie_message(),start_game()},winning_message=function(){return alert("You just beat my computer program! Bet you can't beat it the next time around though..."),!0},losing_message=function(){return alert("You just lost to my computer program. Can you do better?"),!0},tie_message=function(){return alert("The game is a draw. Can you do better?"),!0},turn_reveal=function(){turn_preprocess("reveal"),calculate_next_row(),turn_postprocess("reveal")},turn_squares=function(e){turn_preprocess("squares"),change_squares(e),turn_postprocess("squares",e)},turn_rule=function(e){turn_preprocess("rule"),change_rule(e),turn_postprocess("rule",e)},compute_clickable=function(){turn==human_player&&reveal[human_player]>0?(clickable_squares=!0,clickable_rules=!0):(clickable_squares=!1,clickable_rules=!1)},validNumbers=function(e){for(var r=0;r<e.length;r++)if(e[r]<0||e[r]>=columns)return!1;return!0},check_game_over=function(){return 0==rows_left&&(game_over=!0),!0};